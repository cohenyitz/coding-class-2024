const jsonServer = require('json-server');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');
const server = jsonServer.create();
const router = jsonServer.router('db.json');
const middlewares = jsonServer.defaults();

const SECRET_KEY = "mysecretkey";  // JWT Secret
const expiresIn = '1h';  // Token expires in 1 hour

// Use default middlewares (logger, static, cors, etc.)
server.use(middlewares);
server.use(bodyParser.urlencoded({ extended: true }));
server.use(bodyParser.json());

// Function to create a JWT token
function createToken(payload) {
    return jwt.sign(payload, SECRET_KEY, { expiresIn });
}

// Verify JWT Token
function verifyToken(token) {
    return jwt.verify(token, SECRET_KEY, (err, decoded) => decoded !== undefined ? decoded : err);
}

// Middleware to protect routes
function isAuthenticated({ headers }, res, next) {
    const authHeader = headers['authorization'];
    if (authHeader) {
        const token = authHeader.split(' ')[1];
        try {
            verifyToken(token);
            next();
        } catch (err) {
            res.status(401).json({ message: 'Unauthorized access, invalid token' });
        }
    } else {
        res.status(401).json({ message: 'No token provided' });
    }
}

// Login route
server.post('/api/auth/login', (req, res) => {
    const { username, password } = req.body;
    const user = router.db.get('users').find({ username, password }).value();

    if (!user) {
        return res.status(401).json({ message: 'Invalid username or password' });
    }

    // Create JWT token
    const token = createToken({ username: user.username });
    return res.status(200).json({ token });
});

// Signup route
server.post('/api/auth/signup', (req, res) => {
    const { username, email, password } = req.body;
    const userExists = router.db.get('users').find({ username }).value();

    if (userExists) {
        return res.status(400).json({ message: 'User already exists' });
    }

    const newUser = {
        id: router.db.get('users').value().length + 1,
        username,
        email,
        password, // In a real-world scenario, you should hash passwords
        token: createToken({ username })
    };

    router.db.get('users').push(newUser).write();
    return res.status(201).json({ token: newUser.token });
});

// Protect specific routes (animal profiles)
server.use('/api/animals/:id', isAuthenticated);

// Use default router
server.use(router);

// Start server
server.listen(8080, () => {
    console.log('JSON Server is running on http://localhost:8080');
});
